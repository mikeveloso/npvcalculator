using System.Collections.Generic;

using AutoFixture;
using AutoFixture.AutoMoq;
using Moq;
using Xunit;

using NpvCalculator.Repositories;
using NpvCalculator.Models;
using System.Threading.Tasks;

namespace NpvCalculator.Tests
{
    public class NpvCalculatorTests  : IClassFixture<NpvCalculatorFixture>
    {
        private readonly NpvRepository repo;

        public NpvCalculatorTests(NpvCalculatorFixture fixture)
        {
            repo = fixture.CalculatorRepository;
        }
        [Fact]
        public void CalculateNpvForOneYearXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.   
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 10000, 1000, 500, 1);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the Npv Result Items
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal(baseNpvData, npvData);
        }

        [Fact]
        public void CalculateNpvForTwoYearsXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.        
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 20000, 1000, 500, 2);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal(baseNpvData, npvData);
        }

        [Fact]
        public void CalculateNpvForThreeYearsXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 30000, 1000, 500, 3);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal(baseNpvData, npvData);
        }

        [Fact]
        public void CalculateNpvForFourYearsXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 40000, 1000, 500, 4);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal(baseNpvData, npvData);
        }

        [Fact]
        public void CalculateNpvForFiveYearsXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 50000, 1000, 500, 5);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal(baseNpvData, npvData);
        }

        [Fact]
        public void CalculateNpvForSixYeasrXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 60000, 1000, 500, 6);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal(baseNpvData, npvData);
        }

        [Fact]
        public void CalculateNpvForSevenYearsXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 70000, 1000, 500, 7);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal(baseNpvData, npvData);
        }

        [Fact]
        public void CalculateNpvForEightYearsXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 80000, 1000, 500, 8);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal(baseNpvData, npvData);
        }

        [Fact]
        public void CalculateNpvForNineYearsXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 90000, 1000, 500, 9);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal<IEnumerable<NpvResultItem>>(baseNpvData.NpvResultItems, npvData.NpvResultItems);
        }

        [Fact]
        public void CalculateNpvForTenYearsXTest()
        {
            ///Generate Expected NPV Results From .Net Finacial Method
            ///Base the parameters provided.
            Npv baseNpvData = FakeNpv.GetBaseNpvWithResults(1, 15, 0.25, 100000, 1000, 500, 10);

            ///Use the base NPV Data and remove
            ///the correct results generated by .Net Financial Library
            ///and use to test the Npv Calculator
            Npv npvData = baseNpvData;

            ///Reset the NpvResultItems
            npvData.NpvResultItems = new List<NpvResultItem>();

            npvData = repo.CalculateNetPresentValue(npvData);

            Assert.Equal<Npv>(baseNpvData, npvData);
        }
    }
}
